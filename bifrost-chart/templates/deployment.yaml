apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-postgres
spec:
  serviceName: {{ .Release.Name }}-postgres-service
  replicas: {{ .Values.postgres.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-postgres
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-postgres
    spec:
      containers:
        - name: {{ .Release.Name }}-postgres
          image: "{{ .Values.postgres.image.repository }}"
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: {{ .Values.postgres.service.port }}
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres-secret
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres-secret
                  key: password
            - name: POSTGRES_DB
              value: "postgres"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          resources:
            requests:
              cpu: "{{ .Values.postgres.resources.requests.cpu }}"
              memory: "{{ .Values.postgres.resources.requests.memory }}"
            limits:
              cpu: "{{ .Values.postgres.resources.limits.cpu }}"
              memory: "{{ .Values.postgres.resources.limits.memory }}"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: postgres-config-volume
              mountPath: /etc/postgresql
              readOnly: true
            - name: postgres-init-scripts-volume
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
          args:
            - "-c"
            - "config_file=/etc/postgresql/postgresql.conf"
      volumes:
        - name: postgres-config-volume
          configMap:
            name: {{ .Release.Name }}-postgres-config
            items:
              - key: postgresql.conf
                path: postgresql.conf
              - key: pg_hba.conf
                path: pg_hba.conf
        - name: postgres-init-scripts-volume
          configMap:
            name: {{ .Release.Name }}-postgres-init-scripts
            items:
              - key: init.sql
                path: init.sql
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.postgres.persistence.size }}
        storageClassName: {{ .Values.postgres.persistence.storageClass }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-next
spec:
  replicas: {{ .Values.node.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-next
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-next
    spec:
      containers:
        - name: next
          image: "{{ .Values.node.image.repository }}"
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 3000
          env:
            - name: DATABASE_URL
              value: {{ .Values.node.env.DATABASE_URL | quote }}
            - name: NODE_ENV
              value: {{ .Values.node.env.NODE_ENV | quote }}
          resources:
            requests:
              cpu: {{ .Values.node.resources.requests.cpu }}
              memory: {{ .Values.node.resources.requests.memory }}
            limits:
              cpu: {{ .Values.node.resources.limits.cpu }}
              memory: {{ .Values.node.resources.limits.memory }}